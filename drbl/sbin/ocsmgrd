#!/usr/bin/perl
#
# Author: Blake, Kuo-Lien Huang
# License: GPL
# Description:
#   2003/04/11 the first version, only work for PXE

# Reference: 
#  perldoc IO::Select
#  perldoc IO::Socket:INET
#
#  2005/1/20
#  Steven Shiau modified the following to meet 
#  DRBL for RedHat/Fedora/Mandrake
#  tftpboot => '/tftpboot/nbi_img',

#  2005/3/30
#  use udp-cast, so we won't deal with client_to_wait or time_to_wait, let udp-cast takes are of that!
#  2013/09/21
#  Adding help messages.

use strict;
use IO::Select;
use IO::Socket;
use POSIX qw(strftime);

$|++;

our $start_time = time;
our %config = (
  port => 6461,
  log => 1,
  logfile => '/var/log/clonezilla/ocsmgrd.log',
  joblog => 1,
  joblogfile => '/var/log/clonezilla/clonezilla-jobs.log',
  tftpboot => '/tftpboot/nbi_img',
  script_to_exec => '',
  nocheck => 0,
  write_pxe_cfg => 0,
);
#
our $usage="Usage: $0 [-l|--log LOG_FILE] [-p|--port NO] [-n|--nopxecfg]";
sub usage_details{
  die "$usage\n".
  "-l, --log LOG_FILE  Assign the log file as LOG_FILE. Default log file is $config{logfile}\n".
  "-p, --port NO       Assign the port number NO. Default port number is $config{port}\n".
  "-n, --nopxecfg      Do not write PXELinux config for the specific client when receiving job is done\n".
  ";"
} # end of usage_details
#
while ( $_ = shift ) {
  if (/-p|--port/) { 
    $config{port} = shift;
  } elsif (/-l|--log/) {
    $config{log} = 1;
    $config{logfile} = shift;
  } elsif(/-s|--script_to_exec/) {
    $config{script_to_exec} = shift;
  } elsif(/--nocheck/) {
    $config{nocheck} = 1;
  } elsif(/-n|--nopxecfg/) {
    $config{write_pxe_cfg} = 1;
  } elsif(/^(-)?(-)?h(elp)?$/) {
    usage_details();
  }
}
#
my $pxe_conf_default=$config{tftpboot}."/pxelinux.cfg/default";
my $grub_conf_default=$config{tftpboot}."/grub-efi.cfg/grub.cfg";

# check if root or not.
# added by Steven Shiau 2005/02/19
my $whoiam = `LC_ALL=C id -nu`;
chomp($whoiam);
if ("$whoiam" ne "root") { 
  print "[$ENV{LOGNAME}] You need to run this program as root.\n";
  exit(1);
}

# clean the stale log files.
unlink ($config{logfile}) if -f $config{logfile};
unlink ($config{joblogfile}) if -f $config{joblogfile};

# start the ocsmgrd server
# print "Client jobs are logged in $config{joblogfile}\n";
my $now_string = strftime "%Y-%m%d-%H%M", localtime;
&client_joblog("Start clonezilla logging.");
&start_server(%config);

sub log($) {
  my $line = shift;
  return unless $config{log} and $config{logfile};
  open(LOG, ">> $config{logfile}") || die $!;
  my $now_string = strftime "%Y-%m%d-%H%M", localtime;
  print LOG $now_string, ":", $line, "\n";
  close(LOG);
}

sub client_joblog($) {
  my $line = shift;
  return unless $config{joblog} and $config{joblogfile};
  open(JOBLOG, ">> $config{joblogfile}") || die $!;
  my $now_string = strftime "%Y-%m%d-%H%M", localtime;
  print JOBLOG $now_string, ", ", $line, "\n";
  close(JOBLOG);
}

sub start_server(%) {
  my %config = @_;
  die unless $config{port} > 0;
  my $lsn = new IO::Socket::INET(Listen => 1, LocalPort => $config{port}, Reuse => 1);
  my $sel = new IO::Select($lsn);

  &log("server started");
  #$SIG{CHLD}='IGNORE';

  while(my @ready = $sel->can_read) {
    foreach my $fh (@ready) {
      my $new;
      if($fh == $lsn) {
        # create a new socket
        $new = $lsn->accept;
        $sel->add($new);
      } else {
        # process socket
        if(my $pid = fork()) {
          # parent: close the connection so we can keep listening
          $sel->remove($fh);
          $fh->close();
        } else {
          # child: deal with the connection
          my $peeraddr_mac = $fh->getline;
          chomp($peeraddr_mac);
	  my @peerdata=split(" ",$peeraddr_mac);
	  my $peeraddr="$peerdata[0]";
	  my $peermac="$peerdata[1]";
	  my $peerefioslable="$peerdata[2]";  # for EFI client
	  my $peerefipart="$peerdata[3]";  # for EFI client
	  my $peerefibootf="$peerdata[4]"; # for EFI client
	  my $peermsg="@peerdata[5..$#peerdata]";
	  if (! $peermsg) {$peermsg="N/A"};
          &log("connection opened: ".$fh->peerhost());
          # add code to parse if it is IP ? or other keyword to check...
          print "Client $peeraddr ($peermac) finished restoring. Stats: $peermsg\n";
          &client_joblog("client $peeraddr ($peermac) finished restoring. Stats: $peermsg");
          &log("connection closed: ".$fh->peerhost());
          $fh->close();
        }
      }
    }
  }
}
